pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'frontend:latest'
        DOCKER_TAG = "frontend:${BUILD_NUMBER}"
        FRONTEND_PATH = "/home/ec2-user/frontend"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Get Commit Message') { 
            steps {
                script {
                    def gitCommitMessage = sh(
                        script: "git log -1 --pretty=%B",
                        returnStdout: true
                    ).trim()
                    echo "Commit Message: ${gitCommitMessage}"
                    env.GIT_COMMIT_MESSAGE = gitCommitMessage
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                    sh "docker tag ${DOCKER_IMAGE} ${DOCKER_TAG}"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "docker tag ${DOCKER_IMAGE} my-docker-hub-account/${DOCKER_IMAGE}"
                    sh "docker push my-docker-hub-account/${DOCKER_IMAGE}"
                }
            }
        }

        stage('Deploy to Frontend Server') {
            steps {
                script {
                    def sshServerName = 'FrontendServer'
                    sshPublisher(publishers: [
                        sshPublisherDesc(
                            configName: sshServerName,
                            transfers: [
                                sshTransfer(
                                    sourceFiles: "docker-compose.yml",
                                    remoteDirectory: "${FRONTEND_PATH}",
                                    removePrefix: "./"
                                ),
                                sshTransfer(
                                    sourceFiles: "Dockerfile",
                                    remoteDirectory: "${FRONTEND_PATH}",
                                    removePrefix: "./"
                                )
                            ],
                            execCommand: """
                                echo "Starting frontend deployment..."
                                docker-compose -f ${FRONTEND_PATH}/docker-compose.yml down
                                docker-compose -f ${FRONTEND_PATH}/docker-compose.yml up -d
                                echo "Frontend deployed successfully!"
                            """
                        )
                    ])
                }
            }
        }
    }

    post {
        success {
            slackSend (
                message: ":white_check_mark: 성공: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}). 최근 커밋: '${env.GIT_COMMIT_MESSAGE}'"
            )
        }
        failure {
            slackSend (
                message: ":x: 실패: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL}). 최근 커밋: '${env.GIT_COMMIT_MESSAGE}'"
            )
        }
    }
}
